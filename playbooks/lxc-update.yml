---
# Copyright 2017 IBM Corp.
#
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: lxc-update.yml
  hosts: localhost
  gather_facts: yes
  environment: "{{ deployment_environment }}"
  vars:
    os_image_links:
      - name: ubuntu-14.04.5-server-amd64
        images:
          - url: "http://releases.ubuntu.com/14.04.5/ubuntu-14.04.5-server-amd64.iso"
            dest: "{{ project_path_local }}/os_images/ubuntu-14.04.5-server-amd64.iso"
            sha1sum: 5e567024c385cc8f90c83d6763c6e4f1cd5deb6f
      - name: ubuntu-14.04.5-server-ppc64el
        images:
          - url: "http://cdimage.ubuntu.com/releases/14.04.5/release/ubuntu-14.04.5-server-ppc64el.iso"
            dest: "{{ project_path_local }}/os_images/ubuntu-14.04.5-server-ppc64el.iso"
            sha1sum: f4843944ca1927375bd3a0dbeb744f5764876dae
          - url: "http://us.ports.ubuntu.com/dists/trusty-updates/main/installer-ppc64el/20101020ubuntu318.41/images/xenial-netboot/mini.iso"
            dest: "{{ project_path_local }}/os_images/ubuntu-14.04.5-server-ppc64el.mini.iso"
            sha1sum: b167507d2a65fa81f199cd2125079beb499023c6
      - name: ubuntu-16.04.3-server-amd64
        images:
          - url: "http://releases.ubuntu.com/16.04/ubuntu-16.04.3-server-amd64.iso"
            dest: "{{ project_path_local }}/os_images/ubuntu-16.04.3-server-amd64.iso"
            sha1sum: f3532991e031cae75bcf5e695afb844dd278fff9
      - name: ubuntu-16.04.3-server-ppc64el
        images:
          - url: "http://cdimage.ubuntu.com/releases/16.04.3/release/ubuntu-16.04.3-server-ppc64el.iso"
            dest: "{{ project_path_local }}/os_images/ubuntu-16.04.3-server-ppc64el.iso"
            sha1sum: 3048e855b83787a23dc7fdd7e72496e264059d44
  tasks:
    - name: "Read {{ config_local }}"
      include_vars:
        name: config
        file: "{{ config_local }}"

    - name: "Get list of OS images from config.yml"
      set_fact:
        os_image_list: "{{ item.os.profile }}"
      with_items:
        - "{{ config.node_templates }}"
      when:
        - item.os.profile is defined
        - item.os.profile is not none

    - name: "Loop through both lists"
      set_fact:
        images: "{{ item[0].images }}"
      with_nested:
        - "{{ os_image_links }}"
        - "{{ os_image_list }}"
      when: ( item[0].name == (item[1]|splitext)[0] ) or
            ( item[0].name == item[1] )
      register: image_list

    - name: "Compile results into single list with unique entries"
      set_fact:
        image_list_unique:
          "{{ image_list.results | selectattr('ansible_facts', 'defined') | \
           map(attribute='ansible_facts.images') | list | unique }}"

    - name: "Download OS installer images"
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
        force: no
        checksum: "sha1:{{ item.sha1sum }}"
      with_items: "{{ image_list_unique }}"

    - block:
      - name: "Management bridge ipaddr/netmask"
        set_fact:
          ipaddr_bridge_netmask_mgmt: "{{ config.deployer.networks.mgmt.bridge_ipaddr }}/{{ config.deployer.networks.mgmt.netmask }}"
      - name: "Management subnet"
        set_fact:
          mgmt_subnet: "{{ ipaddr_bridge_netmask_mgmt | ipaddr('subnet') }}"
      when: config.deployer.networks.mgmt.netmask is defined

    - block:
      - name: "Management bridge ipaddr/prefix"
        set_fact:
          ipaddr_bridge_cidr_mgmt: "{{ config.deployer.networks.mgmt.bridge_ipaddr }}/{{ config.deployer.networks.mgmt.prefix }}"
      - name: "Management subnet"
        set_fact:
          mgmt_subnet: "{{ ipaddr_bridge_cidr_mgmt | ipaddr('subnet') }}"
      when: config.deployer.networks.mgmt.netmask is not defined

    - name: "Check if POSTROUTING nat rule already exists for client network"
      shell: "iptables -L POSTROUTING -t nat | grep {{ mgmt_subnet }} || true"
      register: postrouting_nat_client_net
      become: yes
      become_method: sudo
      when: config.deployer.gateway

    - name: "If deployer-gateway is true create iptables nat rule"
      command: |
        iptables
        -t nat
        -A POSTROUTING
        -p all
        -s {{ mgmt_subnet }}
        ! -d {{ mgmt_subnet }}
        -j MASQUERADE
      become: yes
      become_method: sudo
      when:
        - config.deployer.gateway
        - postrouting_nat_client_net.stdout == ""

- hosts: deployer
  environment: "{{ deployment_environment }}"
  vars:
    scripts_path_local: "{{ hostvars.localhost.scripts_path_local }}"
    images_local: "{{ hostvars.localhost.project_path_local }}/os_images"
    config_local: "{{ hostvars.localhost.config_local }}"
  tasks:
    - name: "Print local scripts/config paths"
      debug:
        msg: "{{ item }}"
      with_items:
        - "Local Scripts Path: {{ scripts_path_local }}"
        - "Local Config file: {{ config_local }}"

    - name: "RHEL/CentOS: Fix selinuxfs being mounted read-write in the chroot"
      mount:
        name: /sys/fs/selinux
        state: mounted
        src: selinuxfs
        fstype: selinuxfs
        opts: remount,ro
      when: hostvars.localhost.ansible_distribution in ['RedHat','CentOS']
      become: yes
      become_method: sudo

    - name: "Update apt cache and upgrade (safe)"
      apt:
        update_cache: yes
        upgrade: safe
      become: yes
      become_method: sudo

    - name: "Install distro packages"
      apt:
        name: "{{ item }}"
      with_items:
        - python-pip
        - python-dev
        - libffi-dev
        - libssl-dev
        - python-netaddr
        - python-pysnmp4
        - ipmitool
        - git
      become: yes
      become_method: sudo

    - name: "Install python pip packages"
      pip:
        name: "{{ item }}"
      with_items:
        - pip
        - setuptools
        - wheel
        - virtualenv
        - jsonschema
        - jsl
      become: yes
      become_method: sudo

    - name: "Create project root directory"
      file:
        path: "{{ project_path }}"
        state: directory

    - name: "Create python virtual environment"
      command: virtualenv --no-wheel --system-site-packages {{ venv_path }}

    - name: "Activate python venv and install pip packages"
      command: >
        /bin/bash -c "
        source {{ venv_path }}/bin/activate &&
        pip install --ignore-installed
        'pyasn1==0.2.3'
        'pysnmp==4.3.5'
        'pyaml==16.12.2'
        'orderedattrdict==1.4.3'
        'pyghmi==1.0.18'
        'paramiko==2.1.2'
        'tabulate==0.7.7' &&
        deactivate"

    - name: "Copy config file into deployment container"
      copy:
        src: "{{ config_local }}"
        dest: "{{ project_path }}"

    - name: "Copy scripts into deployment container"
      synchronize:
        src: "{{ scripts_path_local }}"
        dest: "{{ project_path }}"

    - name: "Copy OS images and configs into deployment container"
      synchronize:
        src: "{{ images_local }}"
        dest: "{{ project_path }}"

    - name: "Create log file"
      file:
        path: "{{ project_path }}/log.txt"
        state: touch
        mode: 0644
