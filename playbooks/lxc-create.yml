---
# Copyright 2016 IBM Corp.
#
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: lxc-create.yml
  hosts: localhost
  tasks:
    - name: "Print local project path"
      debug:
        msg: "{{ item }}"
      with_items:
        - "Project name: {{ project_path_local }}"

    - name: "Print back-up config file path"
      debug:
        msg: "{{ item }}"
      with_items:
        - "Config file backup: {{ config_local_backup }}"

    - name: "Back-up config file"
      copy:
        src: "{{ config_local }}"
        dest: "{{ config_local_backup }}"
        mode: 0444

    - name: "Install aptitude"
      apt:
        name: aptitude
        update_cache: yes
      become: yes
      become_method: sudo

    - name: "Update apt cache and upgrade (safe)"
      apt:
        update_cache: yes
        upgrade: safe
      become: yes
      become_method: sudo

    - name: "Install LXC"
      apt:
        name: lxc
      become: yes
      become_method: sudo

    - name: "Install liblxc1"
      apt:
        name: liblxc1
      become: yes
      become_method: sudo
      when: ansible_distribution_version == "14.04"

    - name: "Install python-lxc"
      apt:
        name: python-lxc
      become: yes
      become_method: sudo
      when: ansible_distribution_version == "16.04"

    - name: "Update ~/.config/lxc/default.conf"
      lineinfile:
        dest: ~/.config/lxc/default.conf
        line: "{{ item }}"
        create: yes
      with_items:
        - lxc.id_map = u 0 100000 65536
        - lxc.id_map = g 0 100000 65536

    - name: "Make backup of /etc/lxc/lxc-usernet"
      copy:
        src: /etc/lxc/lxc-usernet
        dest: /etc/lxc/lxc-usernet.orig
      become: yes
      become_method: sudo

    - name: "Update /etc/lxc/lxc-usernet"
      lineinfile:
        dest: /etc/lxc/lxc-usernet
        line: "{{ user }} veth lxcbr0 2"
      become: yes
      become_method: sudo

    - name: "Register management network subnet"
      shell: "grep ipaddr-mgmt-network {{ config_local }} | grep -v '^ *#' | awk '{print $2}'"
      vars:
      register: ipaddr_mgmt_network

    - name: "Register management client network subnet"
      shell: "grep ipaddr-mgmt-client-network {{ config_local }} | grep -v '^ *#' | awk '{print $2}'"
      register: ipaddr_mgmt_client_network

    - name: "Register management VLAN"
      shell: "grep vlan-mgmt-network {{ config_local }} | grep -v '^ *#' | awk '{print $2}'"
      register: vlan_mgmt_network

    - name: "Register management client VLAN"
      shell: "grep vlan-mgmt-client-network {{ config_local }} | grep -v '^ *#' | awk '{print $2}'"
      register: vlan_mgmt_client_network

    - name: "Register primary network port"
      shell: "ip route | grep ^default | awk '{print $5}'"
      register: primary_network_port

    - name: "Update group_vars/all container_mgmt_subnet"
      replace:
        dest: "{{ project_path_local }}/playbooks/group_vars/all"
        regexp: '^(container_mgmt_subnet:).*$'
        replace: '\1 {{ ipaddr_mgmt_network.stdout }}'
      when: ipaddr_mgmt_network.stdout != ""

    - name: "Create lxc.conf container with no VLAN support"
      vars:
        ipaddr_mgmt_cidr: "{{ ipaddr_mgmt_network.stdout | ipaddr(container_mgmt_ipv4_offset) }}"
        bridge_mgmt: br0
      template:
        src: "{{ playbook_dir }}/templates/localhost/lxc-conf.j2"
        dest: "{{ playbook_dir }}/lxc.conf"
        mode: "0644"
      when: ipaddr_mgmt_client_network.stdout == ""

    - name: "Create lxc.conf container with VLAN support"
      vars:
        ipaddr_mgmt_cidr: "{{ ipaddr_mgmt_network.stdout | ipaddr(container_mgmt_ipv4_offset) }}"
        ipaddr_mgmt_client_cidr: "{{ ipaddr_mgmt_client_network.stdout | ipaddr(container_mgmt_ipv4_offset) }}"
        bridge_mgmt: "br{{ vlan_mgmt_network.stdout }}"
        bridge_mgmt_client: "br{{ vlan_mgmt_client_network.stdout }}"
      template:
        src: "{{ playbook_dir }}/templates/localhost/lxc-conf-vlan.j2"
        dest: "{{ playbook_dir }}/lxc.conf"
        mode: "0644"
      when: ipaddr_mgmt_client_network.stdout != ""

    - name: "Create management bridge with VLAN support"
      vars:
        primary_port: "{{ primary_network_port.stdout }}"
        ipaddr_cidr: "{{ ipaddr_mgmt_network.stdout | ipaddr(container_bridge_ipv4_offset) }}"
        vlan: "{{ vlan_mgmt_network.stdout }}"
        bridge: "br{{ vlan }}"
      template:
        src: "{{ playbook_dir }}/templates/localhost/bridge-vlan-ubuntu.j2"
        dest: "/etc/network/interfaces.d/{{ bridge }}"
        owner: "root"
        group: "root"
        mode: "0644"
      become: yes
      become_method: sudo
      when: ipaddr_mgmt_client_network.stdout != ""

    - name: "Create management client bridge with VLAN support"
      vars:
        primary_port: "{{ primary_network_port.stdout }}"
        ipaddr_cidr: "{{ ipaddr_mgmt_client_network.stdout | ipaddr(container_bridge_ipv4_offset) }}"
        vlan: "{{ vlan_mgmt_client_network.stdout }}"
        bridge: "br{{ vlan }}"
      template:
        src: "{{ playbook_dir }}/templates/localhost/bridge-vlan-ubuntu.j2"
        dest: "/etc/network/interfaces.d/{{ bridge }}"
        owner: "root"
        group: "root"
        mode: "0644"
      become: yes
      become_method: sudo
      when: ipaddr_mgmt_client_network.stdout != ""

    - name: "Restart networking"
      service: name=networking state=restarted
      become: yes
      become_method: sudo

    - name: "Create private/public ssh key pair"
      user:
        name: "{{ ansible_env.USER }}"
        generate_ssh_key: yes
        ssh_key_file: "{{ ssh_key_private }}"

    - name: "Create LXC deployment container"
      lxc_container:
        name: "{{ container_name }}"
        template: ubuntu
        template_options:
          --user {{ user }}
          --auth-key {{ ssh_key_public }}
          --release trusty
          --packages python,aptitude
        config: "{{ project_path_local }}/playbooks/lxc.conf"
        container_command: |
          cp -p /etc/sudoers /etc/sudoers.orig
          echo -e "{{ user }}\tALL=NOPASSWD: ALL" >> /etc/sudoers
      register: container_info
      become: yes
      become_method: sudo

    - name: "Pause 5 seconds"
      pause:
        seconds: 5

    - name: "Register container internal ip address"
      command: lxc-info -n {{ container_name }} -iH
      register: container_ip
      become: yes
      become_method: sudo

    - name: "Print container IP information"
      debug:
        msg: "{{ item }}"
      with_items:
        - |
            Deployment container internal IP:
            {{ container_ip.stdout_lines | first }}
        - |
            Deployment container management network IP:
            {{ ipaddr_mgmt_network.stdout | ipaddr(container_mgmt_ipv4_offset) |
            ipaddr("address") }}'

    - name: "Update \"deployer\" host with ssh private key."
      replace:
        dest: "{{ project_path_local }}/playbooks/hosts"
        regexp: '^(deployer .+?ansible_ssh_private_key_file=).+?[ ]'
        replace: '\1{{ ssh_key_private }} '
      become: yes
      become_method: sudo

    - name: |
        Update "deployer" host with container management network IP
        address.
      replace:
        dest: "{{ project_path_local }}/playbooks/hosts"
        regexp: '^(deployer .+?)=\d+\.\d+\.\d+\.\d+$'
        replace: |
            \1={{ ipaddr_mgmt_network.stdout |
            ipaddr(container_mgmt_ipv4_offset) | ipaddr("address") }}
      become: yes
      become_method: sudo
