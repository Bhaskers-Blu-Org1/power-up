#!/bin/bash
# Copyright 2017 IBM Corp.
#
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

print_help (){
    cmds=$(cat ~/.bashrc|grep -w -m 1 'complete.*gen')
    cmds=${cmds#*\'}
    cmds=${cmds%\'*}
    cmds=" "${cmds// /$'\n' }
    echo;
    echo "usage: gen [--help] <command> [<args>]"
    echo "Available commands:"
    echo "$cmds"
    echo $'\n'"tab completion is enabled for commands"$'\n'
    echo;
}

deploy (){
    cd "$GEN_PLAY_PATH"
    ansible-playbook -i hosts setup.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    ansible-playbook -i hosts enable_deployer_ifc.yml -K
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    ansible-playbook -i hosts enable_mgmt_switch.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    cd "$GEN_PLAY_PATH"
    ansible-playbook -i hosts lxc-create.yml -K
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi
    echo;

    ansible-playbook -i hosts install_introspection.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi
    echo;

    ansible-playbook -i hosts install_1.yml -K
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi
    echo;

    ansible-playbook -i hosts install_2.yml -K
}

deploy-passive-1 (){
    cd "$GEN_PLAY_PATH"
    ansible-playbook -i hosts setup.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    cd "$GEN_PLAY_PATH"
    ansible-playbook -i hosts enable_mgmt_switch.yml -K
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    ansible-playbook -i hosts lxc-create.yml -K
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi
    echo;

    ansible-playbook -i hosts install_1_passive.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi
    echo;

    if [ ! -d "$GEN_PATH/passive" ]; then
        mkdir "$GEN_PATH/passive"
    fi
}

deploy-passive-2 (){
    echo;
    tput bold
    echo "** PXE Interfaces Will Be Activated Next **"
    tput sgr0
    echo "The next playbook will activate all client node PXE interfaces. Once"
    echo "interfaces are active the management switch MAC address table(s)"
    echo "will need to be collected by someone with authorization to login to "
    echo "the switch management interface. The client node interfaces should
    echo "remain active for approximately one hour. The switch MAC address
    echo "table aging time could be increased to allow more time."
    echo;
    tput bold
    echo "When you are prepared to collect the management switch MAC address"
    echo "table(s) continue and wait for the next prompt."
    tput sgr0
    echo;
    read -p "Enter to continue, (t) to terminate " resp
    if [ "$resp" = "t" ]; then exit; fi

    cd "$GEN_PLAY_PATH"
    ansible-playbook -i hosts container/ipmi_power_pxe.yml
    ansible-playbook -i hosts pause.yml --extra-vars "minutes=10"
    echo;
    tput bold
    echo "** User Action Required to Collect Mgmt Switch MAC Address Tables **"
    tput sgr0
    echo "All systems have been set to PXE boot and powered on. Please collect"
    echo "MAC address tables from all mgmtswitches and write each table to"
    echo "file in 'cluster-genesis/passive'. The files should be named to"
    echo "match the unique values set in the 'config.yml' 'ipaddr-mgmt-switch'"
    echo "dictionary."
    echo;
    tput bold
    echo "Do not continue until all MAC table files are in place!"
    tput sgr0
    echo;
    read -p "Enter to continue, (t) to terminate " resp
    if [ "$resp" = "t" ]; then exit; fi

    verify_passive_mac_table_files mgmt

    ansible-playbook -i hosts container/inv_add_ports.yml \
        --extra-vars "port_type=passive"
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi
    echo;

    ansible-playbook -i hosts container/inv_add_ipmi_data.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    ansible-playbook -i hosts install_2.yml -K
}

post-deploy(){
    cd "$GEN_PLAY_PATH"
    ansible-playbook -i ./inventory.py ssh_keyscan.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    ansible-playbook -i ./inventory.py gather_mac_addresses.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    ansible-playbook -i hosts container/set_data_switch_config.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    ansible-playbook -i ./inventory.py configure_operating_systems.yml
}

post-deploy-passive(){
    cd "$GEN_PLAY_PATH"
    ansible-playbook -i ./inventory.py ssh_keyscan.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    if [ ! -d "$GEN_PATH/passive" ]; then
        mkdir "$GEN_PATH/passive"
    fi

    echo;
    tput bold
    echo "** Data Network Interfaces Will Be Activated Next **"
    tput sgr0
    echo "The next playbook will activate all client node data network"
    echo "interfaces. Once interfaces are active the data switch MAC"
    echo "address table(s) will need to be collected by someone with"
    echo "authorization to login to the switch management interface. Depending"
    echo "on the switch MAC address table aging time configuration there may"
    echo "only be a short window of opportunity to collect a complete table."
    echo "A typical default aging time is 5 minutes. This could be increased"
    echo "to allow more time between activating data interfaces and collecting"
    echo "the table."
    echo;
    tput bold
    echo "When you are prepared to collect the data switch MAC address"
    echo "table(s) continue and wait for the next prompt."
    tput sgr0
    echo;
    read -p "Enter to continue, (t) to terminate " resp
    if [ "$resp" = "t" ]; then exit; fi

    ansible-playbook -i ./inventory.py activate_client_interfaces.yml
    echo;
    tput bold
    echo "** User Action Required to Collect Data Switch MAC Address Tables **"
    tput sgr0
    echo "All client interfaces have been activated. Please collect MAC"
    echo "address tables from all data switches and write each table to file"
    echo "in 'cluster-genesis/passive'. The files should be named to match"
    echo "the unique values set in the 'config.yml' 'ipaddr-data-switch'"
    echo "dictionary."
    echo;
    tput bold
    echo "Do not continue until all MAC table files are in place!"
    tput sgr0
    echo;
    read -p "Enter to continue, (t) to terminate " resp
    if [ "$resp" = "t" ]; then exit; fi

    verify_passive_mac_table_files data

    ansible-playbook -i hosts set_port_macs.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    ansible-playbook -i ./inventory.py restore_client_interfaces.yml
    echo;
    if [ "$1" = "-p" ]; then
        read -p "Enter to continue, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    fi

    ansible-playbook -i ./inventory.py configure_operating_systems.yml
}

show_logc(){
    dep=$(sudo lxc-ls -f|grep -m 1 $cname)
    depaddr=${dep##*,}
    depaddr=${depaddr%-*}
    depaddr=${depaddr// /}
    if [ -f ~/.ssh/id_rsa_ansible-generated ]; then
        ssh -i ~/.ssh/id_rsa_ansible-generated deployer@$depaddr \
            "cat cluster-genesis/log.txt"|less +G
    else
        echo "No ssh key found"
    fi
}

inventory(){
    dep=$(sudo lxc-ls -f|grep -m 1 $cname)
    depaddr=${dep##*,}
    depaddr=${depaddr%-*}
    depaddr=${depaddr// /}
    if [ -f ~/.ssh/id_rsa_ansible-generated ]; then
        ssh -i ~/.ssh/id_rsa_ansible-generated deployer@$depaddr \
            "cat cluster-genesis/inventory.yml"|less
    else
        echo "No ssh key found"
    fi
}

verify_passive_mac_table_files(){
    switch_type=$1
    echo;
    while true; do
        if ${GEN_SCRIPTS_PATH}/python/validate_mac_table_files.py \
                ${GEN_PATH}/config.yml $switch_type DEBUG; then
            break
        fi
        echo;
        tput bold
        echo "** Error: Switch MAC Address Table File Verification Failed! **"
        tput sgr0
        echo "Please address errors printed above. "
        read -p "Enter to try file verification again, (t) to terminate " resp
        if [ "$resp" = "t" ]; then exit; fi
    done
}
